//movement

using System.Collections;
using System.Collections.Generic;
using UnityEngine;
using UnityEngine.UI;

public class MahjongMovement : MonoBehaviour
{

    public GameObject[] Mahjongs = new GameObject[34];
    public static GameObject space;
    Text Message;

    public static List<List<GameObject>> bags = new List<List<GameObject>>();
    List<GameObject> bag1 = new List<GameObject>();
    List<GameObject> bag2 = new List<GameObject>();
    List<GameObject> bag3 = new List<GameObject>();
    List<GameObject> bag4 = new List<GameObject>();
    List<GameObject> box = new List<GameObject>();

    public static int[] fixedNum = new int[4];
    public static bool useray,chooseCancel,chooseAction;

    public static GameObject currentMahjong;
    public static int eatPlayer, pongPlayer, huPlayer; 
    int centerNum,natureChange;

    
    void Start()
    {
        //init
        bags.Add(bag1); bags.Add(bag2); bags.Add(bag3); bags.Add(bag4);
        for (int i = 0; i < 4; ++i) fixedNum[i] = 0;
        useray = true; chooseCancel = false; chooseAction = false;
        centerNum = 0; natureChange=0;
        eatPlayer = 0; pongPlayer=0; huPlayer=0;
        Message = GameObject.Find("Message").GetComponent<Text>();

        //clean table
        for (int c = 1; c <= 5; ++c)
        {
            for (int i = 1; i <= 15; ++i)
            {
                if (c == 5 && i > 12) break;
                space = GameObject.Find($"C{c}-{i}");
                space.transform.GetChild(0).gameObject.SetActive(false);

            }
        }
        space = GameObject.Find($"P1-17");
        space.transform.GetChild(0).gameObject.SetActive(false);

        //create all mahjong
        for(int i = 0; i < 34; ++i)
        {
            for(int j=0;j<4; ++j)
            {
                space = GameObject.Find($"unused");
                GameObject temp = Instantiate(Mahjongs[i]);
                temp.transform.parent = space.transform;
                temp.transform.position = space.transform.position;
                temp.name = $"{i}.{j}";
                box.Add(temp);
            }
        }

        //distribute mahjongs
        for (int p = 1; p <= 4; ++p)
        {
            for (int i = 1; i <= 16; ++i)
            {
                GameObject temp = GetOneInUnused();
                bags[p - 1].Add(temp);
                space = GameObject.Find($"P{p}-{i}");
                space.transform.GetChild(0).gameObject.SetActive(false);
                temp.transform.parent = space.transform;
                temp.transform.SetPositionAndRotation(space.transform.GetChild(0).position, Quaternion.Euler(0, (630 - 90 * p) % 360, 0));
            }
        }
        for (int i = 1; i <= 4; ++i) Arrange(i);

    }


    void Update()
    {
        //檢查是否結束
        if (box.Count == 0)
        {
            Debug.Log("Tie! No more mahjong!");
            //結算頁面
        }

        //檢查p234是否吃碰胡
        if (huPlayer > 1)
        {
            HuMove(huPlayer);
        }
        if (eatPlayer>1)
        {
            EatMove(eatPlayer);
        }
        if (pongPlayer>1)
        {
            PongMove(pongPlayer);
        }



        //若自然換人發新麻將(p1擺到P1-17/p234直接出牌)
        if (natureChange != MahjongCanvas.natureChange)
        {
            for (int p = 1; p <= 4; ++p)
            {
                if (MahjongCanvas.playerTurn[p-1])
                {
                    GameObject temp = GetOneInUnused();
                    bags[p-1].Add(temp);
                    if (p == 1)
                    {
                        space = GameObject.Find($"P1-17");
                        temp.transform.parent = space.transform;
                        temp.transform.SetPositionAndRotation(space.transform.GetChild(0).position, Quaternion.Euler(0, 180, 0));
                        MahjongAlgorithm.Check_One_Hu(1,bags);
                    }
                    else
                    {
                        TakeToCenterMove(p, ChooseOneInBag(bags[p - 1]));
                        Arrange(p);
                        for (int i = 0; i < bags[p - 1].Count; ++i)
                        {
                            GameObject moveMahjong = bags[p - 1][i];
                            space = GameObject.Find($"P{p}-{fixedNum[p - 1] + i + 1}");
                            moveMahjong.transform.parent = space.transform;
                            moveMahjong.transform.SetPositionAndRotation(space.transform.GetChild(0).position, Quaternion.Euler(0, (630 - 90 * p) % 360, 0));
                        }
                    }
                }
            }
        }
        natureChange = MahjongCanvas.natureChange;

        //檢查p1是否需出牌
        if (GameObject.Find("P1-17").transform.childCount > 1 && !MahjongCanvas.timestop) useray = false;
        if (Input.GetMouseButtonDown(0) && !useray)
        {
            useray = true;
            Ray ray = Camera.main.ScreenPointToRay(Input.mousePosition);
            RaycastHit rch;
            if (Physics.Raycast(ray, out rch))
            {
                if (rch.transform.parent.parent.transform.name == "player1")
                {
                    int index = rch.transform.parent.GetSiblingIndex();
                    TakeToCenterMove(1, bag1[index-fixedNum[0]]);
                    Arrange(1);
                    MahjongCanvas.player1TimeCount = -1;
                }
            }
        }
        if (MahjongCanvas.player1TimeCount < 0 && !useray)
        {
            useray = true;
            TakeToCenterMove(1, bag1[bag1.Count-1]);
            Arrange(1);
        }

    }


    GameObject GetOneInUnused()
    {
        int random = Random.Range(0, box.Count);
        GameObject temp = box[random];
        box.RemoveAt(random);
        return temp;
    }

    void Arrange(int player)
    {
        //sort
        bags[player - 1].Sort((x, y) => int.Parse(x.name.Split('.')[0]).CompareTo(int.Parse(y.name.Split('.')[0])));

        //Mahjong move
        for (int i = 0; i < 16 - fixedNum[player - 1]; ++i)
        {
            space = GameObject.Find($"P{player}-{i + 1 + fixedNum[player - 1]}");
            GameObject temp = bags[player - 1][i];
            temp.transform.parent = space.transform;
            temp.transform.SetPositionAndRotation(space.transform.GetChild(0).position, Quaternion.Euler(0, (630 - 90 * player) % 360, 0));
        }

        //print bag item
        string bagItem = $"{bags[player - 1].Count} in player{player}'s bag: ";
        foreach (var item in bags[player - 1])
        {
            bagItem += $"{item.name.Split('.')[0]} ";
        }
        Debug.Log(bagItem);
    }

    public void TakeToCenterMove(int player, GameObject moveMahjong)
    {
        currentMahjong = moveMahjong;
        int a = (centerNum + 1) / 15 + 1;
        int b = (centerNum + 1) % 15;
        if (b == 0)
        {
            a -= 1;
            b = 15;
        }
        space = GameObject.Find($"C{a}-{b}");
        moveMahjong.transform.parent = space.transform;
        moveMahjong.transform.SetPositionAndRotation(space.transform.GetChild(0).position, Quaternion.Euler(270, 180, 0));
        centerNum++;
        bags[player - 1].Remove(moveMahjong);
        Debug.Log($"player{player} move {moveMahjong.name} to center.");

        Message.text+=$"player{player} 出 [{MahjongButton.MahjongType[int.Parse(moveMahjong.name.Split('.')[0])]}]\n";
    }

    public void TakeFromCenterMove(int player)
    {
        space = GameObject.Find("unused"); //暫時先將其放回收區 等出完牌取回
        currentMahjong.transform.parent = space.transform.parent;
        currentMahjong.transform.position = space.transform.GetChild(0).position;
        centerNum--;
        bags[player - 1].Add(currentMahjong);
        Debug.Log($"player{player} take {currentMahjong} from center.");
    }

    public GameObject ChooseOneInBag(List<GameObject> bag)
    {

        for (int i = 27; i <= 33; i++)
        {
            if(bag.FindAll(x => int.Parse(x.name.Split('.')[0]) == i).Count == 1)
            {
                return bag.Find(x => int.Parse(x.name.Split('.')[0]) == i);
            }
        }
        return bag[bag.Count-1];
    }

    //eat
    public void EatMove(int player)
    {
        
        if (player < 0)
        {
            Debug.Log($"EatMove Start.(player:1, button:{-player})");
            Message.text += $"player1 吃!\n";

            TakeFromCenterMove(1);
            for (int i = 0; i < 3; ++i)
            {
                GameObject moveMahjong = bag1.Find(x => int.Parse(x.name.Split('.')[0]) == MahjongAlgorithm.eatList[(player+1)*-1] + i);
                space = GameObject.Find($"P1-{fixedNum[0] + i + 1}");
                moveMahjong.transform.parent = space.transform;
                moveMahjong.transform.SetPositionAndRotation(space.transform.GetChild(0).position, Quaternion.Euler(270, (630 - 90) % 360, 0));
                bag1.Remove(moveMahjong);
            }
            fixedNum[0] += 3;

            Arrange(1);
            for (int i = 0; i < bag1.Count; ++i)
            {
                GameObject moveMahjong = bag1[i];
                space = GameObject.Find($"P1-{fixedNum[0] + i + 1}");
                moveMahjong.transform.parent = space.transform;
                moveMahjong.transform.SetPositionAndRotation(space.transform.GetChild(0).position, Quaternion.Euler(0, (630 - 90) % 360, 0));
            }

            MahjongCanvas.timestop = false;
            MahjongAlgorithm.eatList.Clear();
            chooseAction = true;
            MahjongButton.ClearButton();
        }
        else
        {
            Debug.Log($"EatMove Start.(player:{player})");
            Message.text += $"player{player} 吃!\n";

            TakeFromCenterMove(player);
            for (int i = 0; i < 3; ++i)
            {
                GameObject moveMahjong = bags[player - 1].Find(x => int.Parse(x.name.Split('.')[0]) == MahjongAlgorithm.eatNum+i);
                space = GameObject.Find($"P{player}-{fixedNum[player - 1] + i + 1}");
                moveMahjong.transform.parent = space.transform;
                moveMahjong.transform.SetPositionAndRotation(space.transform.GetChild(0).position, Quaternion.Euler(270, (630 - 90 * player) % 360, 0));
                bags[player - 1].Remove(moveMahjong);
            }
            fixedNum[player - 1] += 3;

            TakeToCenterMove(player, ChooseOneInBag(bags[player - 1]));
            Arrange(player);
            for (int i = 0; i < bags[player - 1].Count; ++i)
            {
                GameObject moveMahjong = bags[player - 1][i];
                space = GameObject.Find($"P{player}-{fixedNum[player - 1] + i + 1}");
                moveMahjong.transform.parent = space.transform;
                moveMahjong.transform.SetPositionAndRotation(space.transform.GetChild(0).position, Quaternion.Euler(0, (630 - 90 * player) % 360, 0));
            }
        }
        eatPlayer = 0;
        Debug.Log($"EatMove End.FixedNum-> player1:{fixedNum[0]} player2:{fixedNum[1]} player3:{fixedNum[2]} player4:{fixedNum[3]}");
    }

    //pong
    public void PongMove(int player)
    {
        Message.text += $"player{player} 碰!\n";
        Debug.Log($"PongMove Start.(player:{player})");

        TakeFromCenterMove(player);
        for (int i = 0; i < 3; ++i)
        {
            GameObject moveMahjong = bags[player - 1].Find(x => int.Parse(x.name.Split('.')[0]) == MahjongAlgorithm.pongNum);
            space = GameObject.Find($"P{player}-{fixedNum[player - 1] + i + 1}");
            moveMahjong.transform.parent = space.transform;
            moveMahjong.transform.SetPositionAndRotation(space.transform.GetChild(0).position, Quaternion.Euler(270, (630 - 90 * player) % 360, 0));
            bags[player - 1].Remove(moveMahjong);
        }
        fixedNum[player - 1] += 3;

        if(player!=1) TakeToCenterMove(player, ChooseOneInBag(bags[player - 1]));
        for (int i = 0; i < bags[player - 1].Count; ++i)
        {
            GameObject moveMahjong = bags[player - 1][i];
            space = GameObject.Find($"P{player}-{fixedNum[player - 1] + i + 1}");
            moveMahjong.transform.parent = space.transform;
            moveMahjong.transform.SetPositionAndRotation(space.transform.GetChild(0).position, Quaternion.Euler(0, (630 - 90 * player) % 360, 0));
        }

        if (player == 1)
        {
            MahjongCanvas.timestop = false;
            chooseAction = true;
            MahjongButton.ClearButton();
            
        }
        Arrange(player);
        pongPlayer = 0;
        Debug.Log($"PongMove End. FixedNum-> player1: {fixedNum[0]} player2: {fixedNum[1]} player3: {fixedNum[2]} player4: {fixedNum[3]}");

    }

    //hu
    public void HuMove(int player)
    {
        Message.text += $"player{player} 胡!遊戲結束！\n";
        Debug.Log($"{player} Win!");
        //翻下全部麻將
        for (int i = 0; i < 16 - fixedNum[player - 1]; ++i)
        {
            GameObject temp = GameObject.Find($"P{player}-{i + 1 + fixedNum[player - 1]}").transform.GetChild(1).gameObject;
            temp.transform.rotation = Quaternion.Euler(270, (630 - 90 * player) % 360, 0);
        }
        huPlayer = 0;
        //結算頁面

    }

    //cancel
    public void CancelMove()
    {
        eatPlayer = 0;
        pongPlayer = 0;
        huPlayer = 0;
        MahjongCanvas.timestop = false;
        chooseCancel = true;
        MahjongButton.ClearButton();
        Debug.Log($"You choose cancel.");
    }

}


//canvas


using System.Collections;
using System.Collections.Generic;
using UnityEngine;
using UnityEngine.UI;

public class MahjongCanvas : MonoBehaviour
{
    Text NameLabel, MoneyLabel, WinRateLabel,TimerLabel,Message;
    Image TimerImage;
    Image[] PlayerStateImage=new Image[4];

    public static int natureChange,DiceNumber;
    public static float player1TimeCount,player234TimeCount;
    public static bool[] playerTurn= new bool[4];
    public static bool timestop;

    int firstPlayer, round, allChange, lastplayer;
    float timepast;
    bool checkEnd, diceInvisible, startgame;

    void Start()
    {
        TimerImage = GameObject.Find("TimerImage").GetComponent<Image>();
        TimerLabel = GameObject.Find("TimerCountdown").GetComponent<Text>();
        NameLabel = GameObject.Find("Name").GetComponent<Text>();
        MoneyLabel = GameObject.Find("Money").GetComponent<Text>();
        WinRateLabel = GameObject.Find("Win/Draw/Lose").GetComponent<Text>();
        Message= GameObject.Find("Message").GetComponent<Text>();

        //init
        player1TimeCount = 10; player234TimeCount = 3;
        timepast = 0; DiceNumber = 0; natureChange = 0; allChange = 0;
        round = 1;

        diceInvisible = false; startgame = false; timestop = false;
        Message.text += $"Press Space to roll dices...";
        Message.color = Color.white;
        MahjongButton.ClearButton();
        
    }

    void Update()
    {
        //check dice number then start
        checkEnd = DiceSensor.checkEnd;
        if (!checkEnd) return;
        if (checkEnd && !diceInvisible)
        {
            firstPlayer = DiceNumber % 4;
            if (firstPlayer == 0) firstPlayer = 4;
            Message.text += $"{DiceNumber}\n";
            Message.text += $"Player{firstPlayer} first!\nGame Start!!!";
            GameObject.Find("Dice").SetActive(false);
            diceInvisible = true;
        }
        if (diceInvisible && !startgame)
        {
            timepast += Time.deltaTime;
            if (timepast > 2)
            {
                startgame = true;
                Message.text = "Round1\n";
                ChangePlayerTurn(firstPlayer);
                natureChange++;
                allChange++;
            }
        }

        //if player1234's turn
        ExecutePlayer1();
        ExecutePlayer234(2);
        ExecutePlayer234(3);
        ExecutePlayer234(4);


        //if player1 choose cancel
        if (MahjongMovement.chooseCancel)
        {
            Debug.Log("Nothing happened! Change player!");
            natureChange++;
            if (lastplayer == 4) ChangePlayerTurn(1);
            else ChangePlayerTurn(lastplayer + 1);

            MahjongMovement.chooseCancel = false;
        }

        //if player1 choose eat/pong
        if (MahjongMovement.chooseAction)
        {
            ChangePlayerTurn(1);
            MahjongMovement.chooseAction = false;
        }
    }

    //1.playerturn bool->true
    //2.playerturn image color->gray
    //3.message->player's turn
    //4.allChange++
    void ChangePlayerTurn(int player)
    {
        allChange++;
        for (int i = 0; i < 4; ++i)
        {
            PlayerStateImage[i] = GameObject.Find($"Player{i+1}_State").GetComponent<Image>();
            if (i == player-1)
            {
                playerTurn[i] = true;
                PlayerStateImage[i].color = Color.gray;
            }
            else
            {
                playerTurn[i] = false;
                PlayerStateImage[i].color = Color.white;
            }
        }
        
        if (allChange > 4)  //refresh message in new round
        {
            round++;
            allChange = 1;
            Message.text = $"Round{round}\n>>Player{player}'s Turn\n";
            Debug.Log("clean message");
        }
        else Message.text += $">>Player{player}'s Turn\n";
    }

    void ExecutePlayer1()
    {
        if (playerTurn[0])
        {
            if (player1TimeCount >= 0)
            {
                if(!timestop) player1TimeCount -= Time.deltaTime;
                TimerImage.color = Color.Lerp(Color.white, Color.red, Mathf.PingPong(Time.time, 1));
                TimerLabel.text = $"{(int)player1TimeCount}";
            }
            else
            {
                TimerLabel.text = $"10";
                if (player1TimeCount > -3)
                {
                    if (!timestop) player1TimeCount -= Time.deltaTime;
                    TimerImage.color = Color.white;
                }
                else
                {
                    player1TimeCount = 10;
                    CheckIncident(1);
                }
                
            } 
        }
    }

    void ExecutePlayer234(int player)
    {
        if (playerTurn[player-1] && !timestop)
        {
            if (player234TimeCount >= 0)
            {
                player234TimeCount -= Time.deltaTime;
            }
            else
            {
                player234TimeCount = 3;
                CheckIncident(player);
            }
        }
    }

    void CheckIncident(int player)
    {
        //check hu
        for(int i = 1; i <= 4; ++i)
        {
            if (i == player) continue;
            MahjongAlgorithm.Check_One_Hu(player, MahjongMovement.bags);
            if (MahjongMovement.huPlayer == 1) lastplayer = player;
            if (MahjongMovement.huPlayer > 0) return;
        }
        //check pong
        MahjongAlgorithm.Check_All_Pong(player, MahjongMovement.currentMahjong, MahjongMovement.bags);
        if (MahjongMovement.pongPlayer > 0)
        {
            if (MahjongMovement.pongPlayer == 1) lastplayer = player;
            else ChangePlayerTurn(MahjongMovement.pongPlayer);
            return;
        }

        //check eat
        if (player == 4) MahjongAlgorithm.Check_Next_Eat(1, MahjongMovement.currentMahjong, MahjongMovement.bags[0]);
        else MahjongAlgorithm.Check_Next_Eat(player + 1, MahjongMovement.currentMahjong, MahjongMovement.bags[player]);
        if (MahjongMovement.eatPlayer > 0)
        {
            if (MahjongMovement.eatPlayer == 1) lastplayer = player;
            else ChangePlayerTurn(MahjongMovement.eatPlayer);
            return;
        }

        //nothing
        Debug.Log("Nothing happened! Change player!");
        natureChange++;
        if (player == 4) ChangePlayerTurn(1);
        else ChangePlayerTurn(player + 1);
        
    }
}

//algorithm

using System.Collections;
using System.Collections.Generic;
using UnityEngine;

public class MahjongAlgorithm : MonoBehaviour
{

    public static int eatNum,pongNum;
    public static List<int> eatList = new List<int>();

    //下個人做
    public static void Check_Next_Eat(int playerToCheck, GameObject currentMahjong, List<GameObject> bag)
    {
        Debug.Log($"Algorithm check player{playerToCheck} eat...");
        int currentNum = int.Parse(currentMahjong.name.Split('.')[0]);
        List<int> temp = new List<int>();
        for (int i = 0; i < bag.Count; ++i) temp.Add(int.Parse(bag[i].name.Split('.')[0]));

        //currentNum能出現的位置
        bool right = true, left = true, center = true; 
        if (currentNum == 0 || currentNum == 9 || currentNum == 18)
        {
            left = true;
            right = false;
            center = false;
        }
        else if (currentNum == 1 || currentNum == 10 || currentNum == 19)
        {
            left = true;
            right = false;
            center = true;
        } 
        else if (currentNum == 7 || currentNum == 16 || currentNum == 25)
        {
            left = false;
            right = true;
            center = true;
        }
        else if (currentNum == 8 || currentNum == 17 || currentNum == 26)
        {
            left = false;
            right = true;
            center = false;
        }
        else if(currentNum>26)
        {
            left = false;
            right = false;
            center = false;
        }

        //right
        if (right && temp.Contains(currentNum - 1) && temp.Contains(currentNum - 2))
        {
            Debug.Log($"Find eat! (player={playerToCheck},Head number={currentNum - 2})");
            MahjongMovement.eatPlayer = playerToCheck;
            if (playerToCheck == 1) eatList.Add(currentNum - 2);
            else
            {
                eatNum = currentNum - 2;
                return;
            }
        }
        //center
        if (center && temp.Contains(currentNum - 1) && temp.Contains(currentNum + 1))
        {
            Debug.Log($"Find eat! (player={playerToCheck},Head number={currentNum - 1})");
            MahjongMovement.eatPlayer = playerToCheck;
            if (playerToCheck == 1) eatList.Add(currentNum - 1);
            else
            {
                eatNum= currentNum - 1;
                return;
            }
        }
        //left
        if (left && temp.Contains(currentNum + 1) && temp.Contains(currentNum + 2))
        {
            Debug.Log($"Find eat! (player={playerToCheck},Head number={currentNum})");
            MahjongMovement.eatPlayer = playerToCheck;
            if (playerToCheck == 1) eatList.Add(currentNum);
            else
            {
                eatNum = currentNum;
                return;
            }
        }

        if (eatList.Count>0)
        {
            string str=$"currentMahjong:{currentMahjong},eatlist:";
            for (int i = 0; i < eatList.Count;i++) str += $"{eatList[i]} ";
            Debug.Log(str);
        }
        
    }

    //每人每局都要做
    public static void Check_All_Pong(int currentPlayer, GameObject currentMahjong, List<List<GameObject>> bags)
    {
        Debug.Log($"Algorithm pong...");
        int currentNum = int.Parse(currentMahjong.name.Split('.')[0]);
        for (int p = 1; p <= bags.Count; ++p)
        {
            if (p == currentPlayer) continue;
            else
            {
                List<int> temp = new List<int>();
                for (int i = 0; i < bags[p - 1].Count; ++i) temp.Add(int.Parse(bags[p - 1][i].name.Split('.')[0]));

                for (int i = 0; i < temp.Count - 1; ++i)
                {
                    if (currentNum==temp[i] && currentNum == temp[i + 1])
                    {
                        pongNum = currentNum;
                        MahjongMovement.pongPlayer = p;
                        Debug.Log($"Find p{p} pong!");
                        return;
                    }
                }
            }
        }
    }


    public static void Check_One_Hu(int player, List<List<GameObject>> bags)
    {
        Debug.Log($"Algorithm hu...");
        //get baglist(1~9,11~19,21~29,31~37)
        List<int> tempList = new List<int>();
        for (int i = 0; i < bags[player-1].Count; ++i) tempList.Add(int.Parse(bags[player-1][i].name.Split('.')[0]));
        tempList.Sort();
        List<int> bagList = new List<int>();
        for (int i = 0; i < tempList.Count; i++)
        {
            if (tempList[i] < 9) bagList.Add(tempList[i] + 1);
            else if (tempList[i] < 18) bagList.Add(tempList[i] + 2);
            else if (tempList[i] < 27) bagList.Add(tempList[i] + 3);
            else bagList.Add(tempList[i] + 4);
        }

        //找出最後一對可能解 
        List<int> pairList = new List<int>();
        for (int i = 1; i <= 37; ++i)
        {
            if (bagList.FindAll(x => x == i).Count >= 2)
            {
                pairList.Add(i);
            }
        }
        //剩下3n張找解
        for (int i = 0; i < pairList.Count; ++i)
        {
            List<int> checkList = new List<int>();
            for (int j = 0; j < bagList.Count; ++j) checkList.Add(bagList[j]);
            checkList.Remove(pairList[i]);
            checkList.Remove(pairList[i]);
            FindSolution(checkList);
            if (MahjongMovement.huPlayer != 0)
            {
                MahjongMovement.huPlayer = player;
                Debug.Log($"find {player} hu");
                break;
            }
        }
    }

    public static void FindSolution(List<int> checkList)
    {
        if (checkList.Count==0)
        {
            MahjongMovement.huPlayer = -1;
            return;
        }
        else
        {
            if (checkList.FindAll(x => x == checkList[0]).Count <= 2)
            {
                if (checkList.Contains(checkList[0] + 1) && checkList.Contains(checkList[0] + 2))
                {
                    int[] temp = { checkList[0], checkList[0] + 1, checkList[0] + 2 };
                    for (int i = 0; i < 3; ++i) checkList.Remove(temp[i]);
                    FindSolution(checkList);

                }
                else return;

            }
            else
            {
                for (int i = 0; i < 3; ++i) checkList.Remove(checkList[0]);
                FindSolution(checkList);
            }
        }
    }
    
}

//button

using System.Collections;
using System.Collections.Generic;
using UnityEngine;
using UnityEngine.EventSystems;
using UnityEngine.UI;

public class MahjongButton : MonoBehaviour
{
    public static string[] MahjongType = { "1萬", "2萬", "3萬", "4萬", "5萬", "6萬", "7萬", "8萬", "9萬",
                                          "1筒", "2筒", "3筒", "4筒", "5筒", "6筒", "7筒", "8筒", "9筒",
                                          "1條", "2條", "3條", "4條", "5條", "6條", "7條", "8條", "9條",
                                          "東風", "西風", "南風", "北風",  "紅中",  "發財",  "白板"};

    void Update()
    {
        //eat+cancel buttons
        if (MahjongMovement.eatPlayer==1)
        {
            MahjongCanvas.timestop = true;
            for(int i = 0; i < MahjongAlgorithm.eatList.Count;++i)
            {
                GameObject button = GameObject.Find("Action").transform.GetChild(i).gameObject;
                button.SetActive(true);
                button.GetComponentInChildren<Text>().text = $"吃： {MahjongType[MahjongAlgorithm.eatList[i]]}";
            }
            GameObject.Find("Action").transform.GetChild(5).gameObject.SetActive(true);

        }

        //pong+cancel button
        if (MahjongMovement.pongPlayer==1)
        {
            MahjongCanvas.timestop = true;
            GameObject button = GameObject.Find("Action").transform.GetChild(3).gameObject;
            button.SetActive(true);
            button.GetComponentInChildren<Text>().text = $"碰： {MahjongType[MahjongAlgorithm.pongNum]}";
            GameObject.Find("Action").transform.GetChild(5).gameObject.SetActive(true);

        }

        //hu+cancel button
        if (MahjongMovement.huPlayer==1)
        {
            MahjongCanvas.timestop = true;
            GameObject.Find("Action").transform.GetChild(4).gameObject.SetActive(true);
            GameObject.Find("Action").transform.GetChild(5).gameObject.SetActive(true);

        }

    }

    public static void ClearButton()
    {
        for(int i = 0; i < 6; ++i)
        {
            GameObject.Find("Action").transform.GetChild(i).gameObject.SetActive(false);
        }
    }
}
